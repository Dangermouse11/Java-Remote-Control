package MARC.Administrator;



import MARC.myjavaproject.ViewerHelper.Recorder;
import java.awt.Toolkit;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import MARC.RemoteHost.ClientMainWindoeForInitiating;
import MARC.myjavaproject.Server.RMI.ServerAdmin;
import MARC.myjavaproject.Viewer.RMI.Viewer;
import MARC.myjavaproject.ViewerHelper.ViewerGUI;
import MARC.RemoteHost.HostProperties;
import MARC.RemoteHost.HostServerConfig;
import MARC.myjavaproject.LogInfo.ForAdministrator.AbministratorLogListViewer;
import com.sun.org.apache.bcel.internal.generic.GOTO;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.net.InetAddress;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Hashtable;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.border.MatteBorder;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import MARC.myjavaproject.main;
import MARC.myjavaproject.utilities.FileUtility;
import MARC.myjavaproject.utilities.InetAdrUtility;
import MARC.myjavaproject.LogInfo.ForAdministrator.AppLogInfoForAdministrator;
import MARC.myjavaproject.MARS_AboutBoxGUI;
import java.awt.Desktop;
import java.io.File;


/**
 *
 * @author PARTHO BISWAS
 */
public class ServerMainWindoeForInitiating extends javax.swing.JFrame {

    private static  int ySize;
    private static  int xSize;

//    private   static  Recorder recorder;
//    public  static  Viewer viewer;
//    private static ViewerGUI viewerGUI = new ViewerGUI(null);
    private  ViewerGUI viewerGUI;
    
//    private static ServerMainWindoeForInitiating SMWFI = new ServerMainWindoeForInitiating();
    public  static ServerMainWindoeForInitiating SMWFI02 = new ServerMainWindoeForInitiating();

//    public ServerMainWindoeForInitiating SMWFI ;
//    public static Container cont;


    public static String CONFIG_FILE;
//    public static String SERVER_CONFIG_FILE;
    public static String VIEWER_CONFIG_FILE;

    public static String KEY_STORE;
    public static String TRUST_STORE;

    

//    public static int tableRowCount = -1;
    public static int tableDispIndex = -1;



    public TableColumn column = null;
    public TableColumn col = null;


    public static int Id = 1;
//    public static Hashtable<Integer,Recorder> HostID = new Hashtable<Integer,Recorder>();
//    public static Hashtable<String,Recorder> HostID = new Hashtable<String,Recorder>();
    public static Hashtable<String,Viewer> HostID = new Hashtable<String,Viewer>();
//    public static Hashtable<Integer,Viewer> ViewerID = new Hashtable<Integer,Viewer>();
//    public static Hashtable<String,Viewer> ViewerID = new Hashtable<String,Viewer>();









    /** Creates new form ServerMainWindoeForInitiating */
    public ServerMainWindoeForInitiating() {
        
        setIconImage(Toolkit.getDefaultToolkit().getImage("resourse/kdm-config-icon.png"));

    
        initComponents();

        
//prevent reordering/resizing of columns
        directAccTable1.getTableHeader().setReorderingAllowed(false);
//        directAccTable1.setAlignmentX((float) 0.5);
//        directAccTable1.setAlignmentY((float) 0.5);


        // this loop makes the column at different width for both table
        for (int l = 0; l < 5 ; l++ )
        {
           column = directAccTable1.getColumnModel().getColumn(l);
           
           if (l == 2)
           {
               column.setPreferredWidth(35); //third column is bigger
           }
           if (l == 3)
           {
               column.setPreferredWidth(20);
           }           
           if (l == 4)
           {
               column.setPreferredWidth(20);
           }

        }


        for(int m = 0;m<5;m++)
        {
            col = userAccInfoTable.getColumnModel().getColumn(m);


           if( m == 4)
           {
               col.setPreferredWidth(20);
           }
        }

//        updateStatusOfAdm();


        //this the time(this clows down the application)
//        timePanel.add(Show_Time_date());

//        infoTablePanel.setVisible(Boolean.FALSE);


        UserAccInfoPassword.loadPassword();

    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenuFileTranfer = new javax.swing.JPopupMenu();
        jMenuItemReceiveFiles = new javax.swing.JMenuItem();
        jMenuItemSendFiles = new javax.swing.JMenuItem();
        adminMomPanel = new javax.swing.JPanel();
        adminIconPanel = new javax.swing.JPanel();
        connectButton = new javax.swing.JButton();
        disconnectButton = new javax.swing.JButton();
        fileTrnsButton = new javax.swing.JButton();
        strHosButton = new javax.swing.JButton();
        admExitButton = new javax.swing.JButton();
        viewOnlyButton = new javax.swing.JButton();
        fullControlButton = new javax.swing.JButton();
        adminConnectionTabbedPane = new javax.swing.JTabbedPane();
        virtualAccPanel = new javax.swing.JPanel();
        infoTableSeeInstScrollPane = new javax.swing.JScrollPane();
        jTextPane3 = new javax.swing.JTextPane();
        PassPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        UserPasswordField = new javax.swing.JPasswordField();
        passOKButton = new javax.swing.JButton();
        passCancelButton = new javax.swing.JButton();
        infoTablePanel = new javax.swing.JPanel();
        virtualAccScrollPane = new javax.swing.JScrollPane();
        userAccInfoTable =  (JTable) this.createBorderForAccInfoTable() ;
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        changpassButton = new javax.swing.JButton();
        hidInfoTablButton = new javax.swing.JButton();
        directAccPanel = new javax.swing.JPanel();
        addPcButton = new javax.swing.JButton();
        directAccScrollPane = new javax.swing.JScrollPane();
        directAccTable1 = (JTable) this.createBorderForDirectTable();
        admConnectionPanel = new javax.swing.JPanel();
        workingGlasPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jCheckBoxManualAdr = new javax.swing.JCheckBox();
        jCheckBoxDefaultAdr = new javax.swing.JCheckBox();
        jCheckBoxMultihomedEnabled = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jCheckBoxSSLEnabled = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jComboBoxLocalAdrs = new javax.swing.JComboBox(InetAdrUtility.getLocalIPAdresses());
        jLabel3 = new javax.swing.JLabel();
        jTextFieldPort = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldUsername = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jPasswordField = new javax.swing.JPasswordField();
        editButton = new javax.swing.JButton();
        applyButton = new javax.swing.JButton();
        runAdmServerToggleButton = new javax.swing.JToggleButton();
        adminStatusPanel = new javax.swing.JPanel();
        admStatusScrollPane = new javax.swing.JScrollPane();
        admTextAreatStatus = new javax.swing.JTextArea();
        adminHistTabbedPane = new javax.swing.JTabbedPane();
        adminLogInfoPanel = new javax.swing.JPanel();
        adminLogInfoScrollPane = new javax.swing.JScrollPane();
        adminLogInfoTextArea = new javax.swing.JTextArea();
        adminContactPanel = new javax.swing.JPanel();
        ClearCurrentLogButton = new javax.swing.JButton();
        ViewAllLogButton = new javax.swing.JButton();
        ClearAllLogButton = new javax.swing.JButton();
        DisableOrEnableLogButton = new javax.swing.JButton();
        timePanel = new javax.swing.JPanel();
        adminMenuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu actionMenu = new javax.swing.JMenu();
        jSeparator1 = new javax.swing.JSeparator();
        addPCMenuItem = new javax.swing.JMenuItem();
        connectFileMenuItem = new javax.swing.JMenuItem();
        disconnectMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        controlMenuItem = new javax.swing.JMenuItem();
        viewMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        filtnsMenuItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JSeparator();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        windowMenu = new javax.swing.JMenu();
        minTryMenuItem = new javax.swing.JMenuItem();
        jSeparator9 = new javax.swing.JSeparator();
        closeAllMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        manualMenuItem = new javax.swing.JMenuItem();
        jSeparator14 = new javax.swing.JSeparator();
        bugMenuItem = new javax.swing.JMenuItem();
        Qu1MenuItem = new javax.swing.JMenuItem();
        jSeparator10 = new javax.swing.JSeparator();
        aboutMenuItem = new javax.swing.JMenuItem();

        jMenuItemReceiveFiles.setBackground(new java.awt.Color(51, 51, 51));
        jMenuItemReceiveFiles.setForeground(new java.awt.Color(204, 0, 0));
        jMenuItemReceiveFiles.setText("Receive File From Host");
        jMenuItemReceiveFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemReceiveFilesActionPerformed(evt);
            }
        });
        jPopupMenuFileTranfer.add(jMenuItemReceiveFiles);

        jMenuItemSendFiles.setBackground(new java.awt.Color(51, 51, 51));
        jMenuItemSendFiles.setForeground(new java.awt.Color(204, 0, 0));
        jMenuItemSendFiles.setText("Send File to Host ");
        jMenuItemSendFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSendFilesActionPerformed(evt);
            }
        });
        jPopupMenuFileTranfer.add(jMenuItemSendFiles);

        setTitle("MARS-Admin Module");
        setBounds(new java.awt.Rectangle(50, 150, 600, 400));
        setResizable(false);

        adminMomPanel.setBackground(new java.awt.Color(57, 60, 87));

        adminIconPanel.setBackground(new java.awt.Color(255, 102, 102));
        adminIconPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 0, 0), 3, true));

        connectButton.setBackground(new java.awt.Color(51, 51, 51));
        connectButton.setForeground(new java.awt.Color(204, 51, 0));
        connectButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MARC/myjavaproject/resources/RemoteDesktop48.png"))); // NOI18N
        connectButton.setToolTipText("Connect\n");
        connectButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.darkGray, java.awt.Color.gray));
        connectButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        connectButton.setIconTextGap(1);
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        disconnectButton.setBackground(new java.awt.Color(51, 51, 51));
        disconnectButton.setForeground(new java.awt.Color(204, 0, 0));
        disconnectButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MARC/myjavaproject/resources/disconnnect48.png"))); // NOI18N
        disconnectButton.setToolTipText("Diaconnect");
        disconnectButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.darkGray, java.awt.Color.gray));
        disconnectButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        disconnectButton.setIconTextGap(1);
        disconnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectButtonActionPerformed(evt);
            }
        });

        fileTrnsButton.setBackground(new java.awt.Color(51, 51, 51));
        fileTrnsButton.setForeground(new java.awt.Color(255, 0, 0));
        fileTrnsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MARC/myjavaproject/resources/File-Transfer-42.png"))); // NOI18N
        fileTrnsButton.setToolTipText("Transfer File");
        fileTrnsButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.darkGray, java.awt.Color.gray));
        fileTrnsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        fileTrnsButton.setIconTextGap(1);
        fileTrnsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileTrnsButtonActionPerformed(evt);
            }
        });

        strHosButton.setBackground(new java.awt.Color(51, 51, 51));
        strHosButton.setFont(new java.awt.Font("Tahoma", 3, 12));
        strHosButton.setForeground(new java.awt.Color(255, 0, 0));
        strHosButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MARC/myjavaproject/resources/krfb-icon42.png"))); // NOI18N
        strHosButton.setText("Start Host");
        strHosButton.setToolTipText("Start Host");
        strHosButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.darkGray, java.awt.Color.gray));
        strHosButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        strHosButton.setIconTextGap(1);
        strHosButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                strHosButtonActionPerformed(evt);
            }
        });

        admExitButton.setBackground(new java.awt.Color(51, 51, 51));
        admExitButton.setFont(new java.awt.Font("Tahoma", 3, 12));
        admExitButton.setForeground(new java.awt.Color(204, 0, 0));
        admExitButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MARC/myjavaproject/resources/index42.png"))); // NOI18N
        admExitButton.setText("Exit");
        admExitButton.setToolTipText("Exit");
        admExitButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.darkGray, java.awt.Color.gray));
        admExitButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        admExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                admExitButtonActionPerformed(evt);
            }
        });

        viewOnlyButton.setBackground(new java.awt.Color(51, 51, 51));
        viewOnlyButton.setForeground(new java.awt.Color(153, 0, 0));
        viewOnlyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MARC/myjavaproject/resources/view42.png"))); // NOI18N
        viewOnlyButton.setToolTipText("View Only");
        viewOnlyButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.darkGray, java.awt.Color.gray));
        viewOnlyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewOnlyButtonActionPerformed(evt);
            }
        });

        fullControlButton.setBackground(new java.awt.Color(51, 51, 51));
        fullControlButton.setForeground(new java.awt.Color(204, 0, 0));
        fullControlButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MARC/myjavaproject/resources/control42.png"))); // NOI18N
        fullControlButton.setToolTipText("Full Control");
        fullControlButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.darkGray, java.awt.Color.gray));
        fullControlButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullControlButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout adminIconPanelLayout = new javax.swing.GroupLayout(adminIconPanel);
        adminIconPanel.setLayout(adminIconPanelLayout);
        adminIconPanelLayout.setHorizontalGroup(
            adminIconPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminIconPanelLayout.createSequentialGroup()
                .addComponent(connectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(disconnectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewOnlyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fullControlButton, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fileTrnsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(strHosButton, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(admExitButton, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE))
        );
        adminIconPanelLayout.setVerticalGroup(
            adminIconPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, adminIconPanelLayout.createSequentialGroup()
                .addGroup(adminIconPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(connectButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fileTrnsButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                    .addComponent(fullControlButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                    .addComponent(viewOnlyButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                    .addComponent(disconnectButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(adminIconPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(strHosButton, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                        .addComponent(admExitButton, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)))
                .addContainerGap())
        );

        adminConnectionTabbedPane.setBackground(new java.awt.Color(0, 0, 0));
        adminConnectionTabbedPane.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 0, 0), 3, true), "Connections", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(204, 0, 51))); // NOI18N
        adminConnectionTabbedPane.setForeground(new java.awt.Color(204, 0, 51));

        virtualAccPanel.setBackground(new java.awt.Color(64, 64, 64));
        virtualAccPanel.setForeground(new java.awt.Color(204, 0, 51));

        jTextPane3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.gray, java.awt.Color.lightGray, java.awt.Color.black, java.awt.Color.darkGray));
        jTextPane3.setEditable(false);
        jTextPane3.setForeground(new java.awt.Color(204, 204, 204));
        jTextPane3.setText("ENTER THE MASTER PASSWARD, WHICH IS PLACED ABOVE, TO SEE THIS INFORMATION TABLE.");
        infoTableSeeInstScrollPane.setViewportView(jTextPane3);

        jLabel1.setForeground(new java.awt.Color(204, 204, 204));
        jLabel1.setText("Enter password to view Acc Info :  ");

        UserPasswordField.setColumns(10);
        UserPasswordField.setForeground(new java.awt.Color(153, 153, 153));
        UserPasswordField.setText("marc");
        UserPasswordField.setToolTipText("Default pass is \"marc\"");
        UserPasswordField.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.darkGray, java.awt.Color.gray));
        UserPasswordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UserPasswordFieldActionPerformed(evt);
            }
        });

        passOKButton.setBackground(new java.awt.Color(51, 51, 51));
        passOKButton.setForeground(new java.awt.Color(255, 0, 0));
        passOKButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MARC/myjavaproject/resources/tick42.png"))); // NOI18N
        passOKButton.setToolTipText("OK");
        passOKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passOKButtonActionPerformed(evt);
            }
        });

        passCancelButton.setBackground(new java.awt.Color(51, 51, 51));
        passCancelButton.setForeground(new java.awt.Color(204, 0, 51));
        passCancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MARC/myjavaproject/resources/cancel42.png"))); // NOI18N
        passCancelButton.setToolTipText("Cancle");
        passCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passCancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PassPanelLayout = new javax.swing.GroupLayout(PassPanel);
        PassPanel.setLayout(PassPanelLayout);
        PassPanelLayout.setHorizontalGroup(
            PassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PassPanelLayout.createSequentialGroup()
                .addGap(351, 351, 351)
                .addComponent(passOKButton, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(passCancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(211, Short.MAX_VALUE))
            .addGroup(PassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(PassPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel1)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(UserPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(443, Short.MAX_VALUE)))
        );
        PassPanelLayout.setVerticalGroup(
            PassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(passOKButton, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
            .addComponent(passCancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
            .addGroup(PassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(PassPanelLayout.createSequentialGroup()
                    .addGap(11, 11, 11)
                    .addGroup(PassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(UserPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(26, Short.MAX_VALUE)))
        );

        userAccInfoTable.setAutoCreateRowSorter(true);
        userAccInfoTable.setBackground(new java.awt.Color(102, 102, 102));
        userAccInfoTable.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        userAccInfoTable.setForeground(new java.awt.Color(204, 0, 0));
        userAccInfoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "Host IP", "Host Port", "User Name", "Password", "SSL Con."
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        userAccInfoTable.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        virtualAccScrollPane.setViewportView(userAccInfoTable);

        jTextPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.darkGray, java.awt.Color.gray));
        jTextPane1.setEditable(false);
        jTextPane1.setFont(new java.awt.Font("Levenim MT", 2, 12));
        jTextPane1.setForeground(new java.awt.Color(204, 0, 0));
        jTextPane1.setText("For establishing a secure connection, the information of the table must be matched in both side. Admin & Host part have to enter these information correctely.");
        jScrollPane1.setViewportView(jTextPane1);

        changpassButton.setBackground(new java.awt.Color(51, 51, 51));
        changpassButton.setText("Change Pass");
        changpassButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        changpassButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changpassButtonActionPerformed(evt);
            }
        });

        hidInfoTablButton.setBackground(new java.awt.Color(51, 51, 51));
        hidInfoTablButton.setText("Hide Table");
        hidInfoTablButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        hidInfoTablButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hidInfoTablButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout infoTablePanelLayout = new javax.swing.GroupLayout(infoTablePanel);
        infoTablePanel.setLayout(infoTablePanelLayout);
        infoTablePanelLayout.setHorizontalGroup(
            infoTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoTablePanelLayout.createSequentialGroup()
                .addGroup(infoTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(infoTablePanelLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(infoTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(changpassButton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hidInfoTablButton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(virtualAccScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE))
        );
        infoTablePanelLayout.setVerticalGroup(
            infoTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(virtualAccScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
            .addGroup(infoTablePanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(changpassButton)
                .addGap(12, 12, 12)
                .addComponent(hidInfoTablButton)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout virtualAccPanelLayout = new javax.swing.GroupLayout(virtualAccPanel);
        virtualAccPanel.setLayout(virtualAccPanelLayout);
        virtualAccPanelLayout.setHorizontalGroup(
            virtualAccPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PassPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(infoTablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(virtualAccPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(virtualAccPanelLayout.createSequentialGroup()
                    .addGap(188, 188, 188)
                    .addComponent(infoTableSeeInstScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(167, Short.MAX_VALUE)))
        );
        virtualAccPanelLayout.setVerticalGroup(
            virtualAccPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(virtualAccPanelLayout.createSequentialGroup()
                .addComponent(PassPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(infoTablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(virtualAccPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(virtualAccPanelLayout.createSequentialGroup()
                    .addGap(120, 120, 120)
                    .addComponent(infoTableSeeInstScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(85, Short.MAX_VALUE)))
        );

        adminConnectionTabbedPane.addTab("User   Account  Information", virtualAccPanel);

        directAccPanel.setBackground(new java.awt.Color(56, 56, 56));
        directAccPanel.setForeground(new java.awt.Color(153, 0, 51));

        addPcButton.setBackground(new java.awt.Color(51, 51, 51));
        addPcButton.setForeground(new java.awt.Color(204, 0, 51));
        addPcButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MARC/myjavaproject/resources/addHost48.png"))); // NOI18N
        addPcButton.setToolTipText("Add PC");
        addPcButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addPcButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPcButtonActionPerformed(evt);
            }
        });

        directAccTable1.setAutoCreateRowSorter(true);
        directAccTable1.setBackground(new java.awt.Color(102, 102, 102));
        directAccTable1.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        directAccTable1.setForeground(new java.awt.Color(204, 0, 0));
        directAccTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "Address Book Name", "Host IP", "Host Port", "SSL", "Conn. Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        directAccTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        directAccScrollPane.setViewportView(directAccTable1);

        javax.swing.GroupLayout directAccPanelLayout = new javax.swing.GroupLayout(directAccPanel);
        directAccPanel.setLayout(directAccPanelLayout);
        directAccPanelLayout.setHorizontalGroup(
            directAccPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(directAccPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(addPcButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(620, Short.MAX_VALUE))
            .addComponent(directAccScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 710, Short.MAX_VALUE)
        );
        directAccPanelLayout.setVerticalGroup(
            directAccPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(directAccPanelLayout.createSequentialGroup()
                .addComponent(addPcButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(directAccScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        adminConnectionTabbedPane.addTab("Direct IP Account Connection", directAccPanel);

        admConnectionPanel.setBackground(new java.awt.Color(51, 51, 51));
        admConnectionPanel.setForeground(new java.awt.Color(204, 0, 0));

        workingGlasPanel.setBackground(new java.awt.Color(0, 0, 0));
        workingGlasPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.gray, java.awt.Color.lightGray, java.awt.Color.black, java.awt.Color.darkGray));

        jPanel2.setBackground(new java.awt.Color(102, 102, 102));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 0, 0), 2, true), "connection Mood", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(204, 0, 0))); // NOI18N
        jPanel2.setForeground(new java.awt.Color(204, 0, 0));

        jCheckBoxManualAdr.setSelected(true);
        jCheckBoxManualAdr.setText("Manual");
        jCheckBoxManualAdr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxManualAdrActionPerformed(evt);
            }
        });

        jCheckBoxDefaultAdr.setText("Default");

        jCheckBoxMultihomedEnabled.setText("Auto detect (Multihomed server)");
        jCheckBoxMultihomedEnabled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMultihomedEnabledActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jCheckBoxManualAdr, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jCheckBoxDefaultAdr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jCheckBoxMultihomedEnabled))
                .addContainerGap(95, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxManualAdr)
                    .addComponent(jCheckBoxDefaultAdr))
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxMultihomedEnabled)
                .addContainerGap(37, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(102, 102, 102));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 0, 0), 2, true), "Connection Security", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(204, 0, 0))); // NOI18N
        jPanel3.setForeground(new java.awt.Color(204, 0, 0));

        jCheckBoxSSLEnabled.setText("SSL(Secured shocket layers)");
        jCheckBoxSSLEnabled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSSLEnabledActionPerformed(evt);
            }
        });

        jTextPane2.setEditable(false);
        jTextPane2.setFont(new java.awt.Font("Levenim MT", 2, 11));
        jTextPane2.setForeground(new java.awt.Color(204, 204, 204));
        jTextPane2.setText("Enable this option onty for Internet connections but not for LAN connections");
        jScrollPane2.setViewportView(jTextPane2);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jCheckBoxSSLEnabled, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                .addGap(10, 10, 10)
                .addComponent(jCheckBoxSSLEnabled)
                .addContainerGap())
        );

        jPanel4.setBackground(new java.awt.Color(102, 102, 102));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 0, 0), 2, true), "Host Address", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(204, 0, 0))); // NOI18N
        jPanel4.setForeground(new java.awt.Color(204, 0, 0));

        jLabel2.setText("Address:");

        jComboBoxLocalAdrs.setMaximumSize(new java.awt.Dimension(28, 20));
        jComboBoxLocalAdrs.setMinimumSize(new java.awt.Dimension(28, 20));
        jComboBoxLocalAdrs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxLocalAdrsActionPerformed(evt);
            }
        });

        jLabel3.setText("Port:");

        jTextFieldPort.setText("6666");
        jTextFieldPort.setMaximumSize(new java.awt.Dimension(28, 20));
        jTextFieldPort.setMinimumSize(new java.awt.Dimension(28, 20));
        jTextFieldPort.setPreferredSize(new java.awt.Dimension(28, 20));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldPort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxLocalAdrs, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBoxLocalAdrs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(102, 102, 102));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 0, 0), 2, true), "Authorisation", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(204, 0, 0))); // NOI18N
        jPanel5.setForeground(new java.awt.Color(204, 0, 0));

        jLabel4.setText("Username:");

        jTextFieldUsername.setText("admin");
        jTextFieldUsername.setMaximumSize(new java.awt.Dimension(28, 2147483647));

        jLabel5.setText("Password:");

        jPasswordField.setText("admin");
        jPasswordField.setMaximumSize(new java.awt.Dimension(28, 2147483647));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldUsername, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(84, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextFieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        editButton.setBackground(new java.awt.Color(51, 51, 51));
        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        applyButton.setBackground(new java.awt.Color(51, 51, 51));
        applyButton.setText("Apply");
        applyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyButtonActionPerformed(evt);
            }
        });

        runAdmServerToggleButton.setBackground(new java.awt.Color(0, 0, 0));
        runAdmServerToggleButton.setForeground(new java.awt.Color(204, 0, 0));
        runAdmServerToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MARC/myjavaproject/resources/idleIcon48.png"))); // NOI18N
        runAdmServerToggleButton.setToolTipText("Run Server");
        runAdmServerToggleButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.darkGray, java.awt.Color.gray));
        runAdmServerToggleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        runAdmServerToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runAdmServerToggleButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout workingGlasPanelLayout = new javax.swing.GroupLayout(workingGlasPanel);
        workingGlasPanel.setLayout(workingGlasPanelLayout);
        workingGlasPanelLayout.setHorizontalGroup(
            workingGlasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(workingGlasPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(workingGlasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(applyButton, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                    .addComponent(editButton, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                    .addComponent(runAdmServerToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(workingGlasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(workingGlasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(12, 12, 12))
        );
        workingGlasPanelLayout.setVerticalGroup(
            workingGlasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(workingGlasPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(workingGlasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(workingGlasPanelLayout.createSequentialGroup()
                        .addComponent(runAdmServerToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editButton, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, workingGlasPanelLayout.createSequentialGroup()
                        .addGroup(workingGlasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(workingGlasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(workingGlasPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(applyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(73, 73, 73))
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout admConnectionPanelLayout = new javax.swing.GroupLayout(admConnectionPanel);
        admConnectionPanel.setLayout(admConnectionPanelLayout);
        admConnectionPanelLayout.setHorizontalGroup(
            admConnectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(workingGlasPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        admConnectionPanelLayout.setVerticalGroup(
            admConnectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, admConnectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(workingGlasPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        adminConnectionTabbedPane.addTab("Start And Configure Admin", admConnectionPanel);

        adminStatusPanel.setBackground(new java.awt.Color(51, 51, 51));
        adminStatusPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 0, 0), 3, true), "Server Status", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(204, 0, 0))); // NOI18N
        adminStatusPanel.setForeground(new java.awt.Color(204, 0, 51));

        admTextAreatStatus.setColumns(20);
        admTextAreatStatus.setEditable(false);
        admTextAreatStatus.setFont(new java.awt.Font("Comic Sans MS", 3, 12));
        admTextAreatStatus.setForeground(new java.awt.Color(204, 0, 102));
        admTextAreatStatus.setRows(5);
        admTextAreatStatus.setText("Idle");
        admStatusScrollPane.setViewportView(admTextAreatStatus);

        javax.swing.GroupLayout adminStatusPanelLayout = new javax.swing.GroupLayout(adminStatusPanel);
        adminStatusPanel.setLayout(adminStatusPanelLayout);
        adminStatusPanelLayout.setHorizontalGroup(
            adminStatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(admStatusScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 367, Short.MAX_VALUE)
        );
        adminStatusPanelLayout.setVerticalGroup(
            adminStatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(admStatusScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
        );

        adminHistTabbedPane.setBackground(new java.awt.Color(51, 51, 51));
        adminHistTabbedPane.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 0, 0), 3, true), "History & Help", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(204, 0, 51))); // NOI18N
        adminHistTabbedPane.setForeground(new java.awt.Color(204, 0, 0));

        adminLogInfoPanel.setBackground(new java.awt.Color(51, 51, 51));

        adminLogInfoTextArea.setColumns(20);
        adminLogInfoTextArea.setEditable(false);
        adminLogInfoTextArea.setFont(new java.awt.Font("Comic Sans MS", 0, 10));
        adminLogInfoTextArea.setForeground(new java.awt.Color(205, 0, 105));
        adminLogInfoTextArea.setRows(5);
        adminLogInfoTextArea.setBorder(null);
        adminLogInfoScrollPane.setViewportView(adminLogInfoTextArea);

        javax.swing.GroupLayout adminLogInfoPanelLayout = new javax.swing.GroupLayout(adminLogInfoPanel);
        adminLogInfoPanel.setLayout(adminLogInfoPanelLayout);
        adminLogInfoPanelLayout.setHorizontalGroup(
            adminLogInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(adminLogInfoScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
        );
        adminLogInfoPanelLayout.setVerticalGroup(
            adminLogInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(adminLogInfoScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
        );

        adminHistTabbedPane.addTab("   Log File   ", adminLogInfoPanel);

        adminContactPanel.setBackground(new java.awt.Color(51, 51, 51));
        adminContactPanel.setForeground(new java.awt.Color(204, 0, 51));

        ClearCurrentLogButton.setBackground(new java.awt.Color(51, 51, 51));
        ClearCurrentLogButton.setText("Clear Current Log ");
        ClearCurrentLogButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.gray, java.awt.Color.lightGray, java.awt.Color.black, java.awt.Color.darkGray));
        ClearCurrentLogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearCurrentLogButtonActionPerformed(evt);
            }
        });

        ViewAllLogButton.setBackground(new java.awt.Color(51, 51, 51));
        ViewAllLogButton.setText("View Log History");
        ViewAllLogButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.gray, java.awt.Color.lightGray, java.awt.Color.black, java.awt.Color.darkGray));
        ViewAllLogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewAllLogButtonActionPerformed(evt);
            }
        });

        ClearAllLogButton.setBackground(new java.awt.Color(51, 51, 51));
        ClearAllLogButton.setText("  Clear All Log  ");
        ClearAllLogButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.gray, java.awt.Color.lightGray, java.awt.Color.black, java.awt.Color.darkGray));
        ClearAllLogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearAllLogButtonActionPerformed(evt);
            }
        });

        DisableOrEnableLogButton.setBackground(new java.awt.Color(51, 51, 51));
        DisableOrEnableLogButton.setText("Disable Log Record");
        DisableOrEnableLogButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.gray, java.awt.Color.lightGray, java.awt.Color.black, java.awt.Color.darkGray));
        DisableOrEnableLogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisableOrEnableLogButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout adminContactPanelLayout = new javax.swing.GroupLayout(adminContactPanel);
        adminContactPanel.setLayout(adminContactPanelLayout);
        adminContactPanelLayout.setHorizontalGroup(
            adminContactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminContactPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(adminContactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ClearCurrentLogButton, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                    .addComponent(ClearAllLogButton, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(adminContactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DisableOrEnableLogButton, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                    .addComponent(ViewAllLogButton, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE))
                .addContainerGap())
        );
        adminContactPanelLayout.setVerticalGroup(
            adminContactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminContactPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(adminContactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(ViewAllLogButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ClearCurrentLogButton, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(adminContactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(DisableOrEnableLogButton, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(ClearAllLogButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        adminHistTabbedPane.addTab("Log Options", adminContactPanel);

        timePanel.setBackground(new java.awt.Color(95, 132, 146));
        timePanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 0, 0), 3, true));

        javax.swing.GroupLayout timePanelLayout = new javax.swing.GroupLayout(timePanel);
        timePanel.setLayout(timePanelLayout);
        timePanelLayout.setHorizontalGroup(
            timePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 102, Short.MAX_VALUE)
        );
        timePanelLayout.setVerticalGroup(
            timePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 51, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout adminMomPanelLayout = new javax.swing.GroupLayout(adminMomPanel);
        adminMomPanel.setLayout(adminMomPanelLayout);
        adminMomPanelLayout.setHorizontalGroup(
            adminMomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, adminMomPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(adminMomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(adminMomPanelLayout.createSequentialGroup()
                        .addComponent(adminStatusPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(adminHistTabbedPane, 0, 0, Short.MAX_VALUE))
                    .addComponent(adminConnectionTabbedPane, 0, 0, Short.MAX_VALUE)
                    .addGroup(adminMomPanelLayout.createSequentialGroup()
                        .addComponent(adminIconPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        adminMomPanelLayout.setVerticalGroup(
            adminMomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminMomPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(adminMomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(adminIconPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(adminConnectionTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(adminMomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(adminHistTabbedPane, 0, 0, Short.MAX_VALUE)
                    .addComponent(adminStatusPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        adminMenuBar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));

        actionMenu.setText("Actions");
        actionMenu.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        actionMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionMenuActionPerformed(evt);
            }
        });
        actionMenu.add(jSeparator1);

        addPCMenuItem.setText("Add New PC");
        addPCMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPCMenuItemActionPerformed(evt);
            }
        });
        actionMenu.add(addPCMenuItem);

        connectFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        connectFileMenuItem.setText("Connect");
        connectFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectFileMenuItemActionPerformed(evt);
            }
        });
        actionMenu.add(connectFileMenuItem);

        disconnectMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        disconnectMenuItem.setText("Disconnect");
        disconnectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectMenuItemActionPerformed(evt);
            }
        });
        actionMenu.add(disconnectMenuItem);
        actionMenu.add(jSeparator2);

        controlMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        controlMenuItem.setText("Full Control");
        controlMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                controlMenuItemActionPerformed(evt);
            }
        });
        actionMenu.add(controlMenuItem);

        viewMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.ALT_MASK));
        viewMenuItem.setText("View Only");
        viewMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewMenuItemActionPerformed(evt);
            }
        });
        actionMenu.add(viewMenuItem);
        actionMenu.add(jSeparator3);

        filtnsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        filtnsMenuItem.setText("File Transfer");
        actionMenu.add(filtnsMenuItem);
        actionMenu.add(jSeparator4);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        actionMenu.add(exitMenuItem);

        adminMenuBar.add(actionMenu);

        windowMenu.setText("Widows");

        minTryMenuItem.setText("Minimise to Tray");
        minTryMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minTryMenuItemActionPerformed(evt);
            }
        });
        windowMenu.add(minTryMenuItem);
        windowMenu.add(jSeparator9);

        closeAllMenuItem.setText("Close All");
        closeAllMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeAllMenuItemActionPerformed(evt);
            }
        });
        windowMenu.add(closeAllMenuItem);

        adminMenuBar.add(windowMenu);

        helpMenu.setText("Help");

        manualMenuItem.setText("User Manual");
        manualMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manualMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(manualMenuItem);
        helpMenu.add(jSeparator14);

        bugMenuItem.setText("Project Profile");
        bugMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bugMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(bugMenuItem);

        Qu1MenuItem.setText("Contact With Us");
        Qu1MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Qu1MenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(Qu1MenuItem);
        helpMenu.add(jSeparator10);

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        adminMenuBar.add(helpMenu);

        setJMenuBar(adminMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(adminMomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(adminMomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static int ind;
    private void disconnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectButtonActionPerformed

      ind = directAccTable1.getSelectedRow();
      if ( ind == -1 )
        {
           JOptionPane.showMessageDialog(this, "Nothing selected . .. ..." + "\n" + "Select an item from " + "\n" + "Direct IP Account Connection table", "Information", JOptionPane.INFORMATION_MESSAGE);
           return;
        }


      String name =  (String) directAccTable1.getValueAt(ind, 1);
//      System.out.println(name);
      if ( name == null )
        {
           JOptionPane.showMessageDialog(this, "Nothing selected..." + "\n" + "Select an item from " + "\n" + "Direct IP Account Connection table", "Information", JOptionPane.INFORMATION_MESSAGE);
           return;
        }

      Boolean conn_sts = (Boolean) directAccTable1.getValueAt(ind, 4);
      if(conn_sts == null)
      {
        JOptionPane.showMessageDialog(this, "This Host is already disconnected . .. ...", "Information", JOptionPane.INFORMATION_MESSAGE);
           return;
      }


      if (JOptionPane.showConfirmDialog(this, "Disconnect " + name + " ? ",
                "Confirm Dialog", JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE) == JOptionPane.CANCEL_OPTION) return;

      // this line minimise the row height
      directAccTable1.setRowHeight(ind, 20);
      // this line deselect the connection status
      directAccTable1.setValueAt(null,ind, 4);

      // this line disconnect the viewer
//      ServerAdmin.removeViewer(ind);
//      ServerAdmin.removeViewer00002(ind);


      String key_nam = (String) userAccInfoTable.getValueAt(ind, 0);
//      Hashtable<String,Viewer> HtID = new Hashtable<String,Viewer>();
//      HtID = HostID;
      viewerrr = null;
      viewerrr = HostID.get(key_nam);

        System.out.println(viewerrr);
        System.out.println(key_nam);

//      vwr.Stop();
//      vwr.disconnect();
//      vwr.recorder.Stop();
      viewerrr.recorder.setPause(true);
      viewerrr.recorder.viewerGUI.dispose();
//      vwr.recorder.viewerGUI.close();
//      HtID.put(key_nam, vwr);
//      vie.recorder.viewerGUI.dispose();



//          this line shows log info on consone and adminLogInfoTextArea
            if(ServerMainWindoeForInitiating.isLogEnable == Boolean.TRUE)
            {
                AppLogInfoForAdministrator.logger.info("Viewer IP: " + key_nam + ", has been disconnected");
            }




      
    }//GEN-LAST:event_disconnectButtonActionPerformed

    private void fileTrnsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileTrnsButtonActionPerformed

      ind = directAccTable1.getSelectedRow();
      if ( ind == -1 )
        {
           JOptionPane.showMessageDialog(this, "Nothing selected . .. ..." + "\n" + "Select an item from " + "\n" + "Direct IP Account Connection table", "Information", JOptionPane.INFORMATION_MESSAGE);
           return;
        }


      String name =  (String) directAccTable1.getValueAt(ind, 1);
//      System.out.println(name);
      if ( name == null )
        {
           JOptionPane.showMessageDialog(this, "Nothing selected..." + "\n" + "Select an item from " + "\n" + "Direct IP Account Connection table", "Information", JOptionPane.INFORMATION_MESSAGE);
           return;
        }

      Boolean conn_sts = (Boolean) directAccTable1.getValueAt(ind, 4);
      if(conn_sts == null)
      {
        JOptionPane.showMessageDialog(this, "This Host is disconnected . .. ...", "Information", JOptionPane.INFORMATION_MESSAGE);
           return;
      }


                 jPopupMenuFileTranfer.show(fileTrnsButton, 45, 45);


//          this line shows log info on consone and adminLogInfoTextArea
/*            if(ServerMainWindoeForInitiating.isLogEnable == Boolean.TRUE)
            {
                AppLogInfoForAdministrator.logger.info("File transferd to Viewer IP: " + userAccInfoTable.getValueAt(ind, 0) );
            }
 */

    }//GEN-LAST:event_fileTrnsButtonActionPerformed

    private void admExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_admExitButtonActionPerformed

        if (JOptionPane.showConfirmDialog(null,
                                "Exit application ?", "Confirm Dialog",
                                JOptionPane.OK_CANCEL_OPTION) ==
                                JOptionPane.OK_OPTION) {

//          this line shows log info on consone and adminLogInfoTextArea
            if(isLogEnable == Boolean.TRUE)
            {
                AppLogInfoForAdministrator.logger.info("Application exits");
            }


                                System.exit(0);
                        }

    }//GEN-LAST:event_admExitButtonActionPerformed

    private void strHosButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_strHosButtonActionPerformed

        if(main.iti == 1)
        {
           ClientMainWindoeForInitiating.main(null);
           main.iti++;
        }
        else
        {
           ClientMainWindoeForInitiating.showClientMainWindoeForInitiating();
        }
//        ClientMainWindoeForInitiating.main(null);
//        this.setVisible(true);
//        this.setLocationRelativeTo( null );
//        ClientMainWindoeForInitiating.showClientMainWindoeForInitiating();
//        ClientMainWindoeForInitiating.setDisabled();
//        setDisabled();

        ClientMainWindoeForInitiating.runHostWithAdmin();


//          this line shows log info on consone and adminLogInfoTextArea
            if(ServerMainWindoeForInitiating.isLogEnable == Boolean.TRUE)
            {
                AppLogInfoForAdministrator.logger.info("Host has been started from administrator");
            }



    }//GEN-LAST:event_strHosButtonActionPerformed


    public static Boolean fromConntctPCButt;
    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed

      fromConntctPCButt = Boolean.TRUE;

      ind = directAccTable1.getSelectedRow();
      if ( ind == -1 )
        {
           JOptionPane.showMessageDialog(this, "Nothing selected . .. ..." + "\n" + "Select an item from " + "\n" + "Direct IP Account Connection table", "Information", JOptionPane.INFORMATION_MESSAGE);
           return;
        }


      String name =  (String) directAccTable1.getValueAt(ind, 1);
      if ( name == null )
        {
           JOptionPane.showMessageDialog(this, "Nothing selected . .. ..." + "\n" + "Select an item from " + "\n" + "Direct IP Account Connection table", "Information", JOptionPane.INFORMATION_MESSAGE);
           return;
        }

      Boolean conn_sts = (Boolean) directAccTable1.getValueAt(ind, 4);
      if(conn_sts == Boolean.TRUE)
      {
        JOptionPane.showMessageDialog(this, "This Host is already connected . .. ...", "Information", JOptionPane.INFORMATION_MESSAGE);
           return;
      }


      else
      {
      if (JOptionPane.showConfirmDialog(this, "Connect " + name + " ? ",
                "Confirm Dialog", JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE) == JOptionPane.CANCEL_OPTION) return;
      // this line minimise the row height
      directAccTable1.setRowHeight(ind, 35);
      // this line deselect the connection status
      directAccTable1.setValueAt(connection_sts,ind, 4);


      String prt = (String) userAccInfoTable.getValueAt(ind, 1);
      int intPrt = Integer.parseInt(prt);
      startViewer((String) userAccInfoTable.getValueAt(ind, 0), intPrt,
                (String) userAccInfoTable.getValueAt(ind, 2),
                (String) userAccInfoTable.getValueAt(ind, 3),
                (Boolean) userAccInfoTable.getValueAt(ind, 4));



      // this saves the Host properties to the table
//        ServerAdmin.displayViewerPropertiesOnTable(ind);
//        tableDispIndex++;

        //this is for saving input information on jtable
//        saveOnDirectAccTable(AddNewPcGUI.jTextFieldName.getText(),AddNewPcGUI.jTextFieldIPAdr.getText(),
//                HostProperties.host_os_name,HostProperties.host_computer_name,HostProperties.host_user_name);


//        PanelFocusingAction();


//          this line shows log info on consone and adminLogInfoTextArea
            if(ServerMainWindoeForInitiating.isLogEnable == Boolean.TRUE)
            {
                AppLogInfoForAdministrator.logger.info("Viewer IP: " + userAccInfoTable.getValueAt(ind, 0) + ", has been reconnected");
            }

      
      }
      

    }//GEN-LAST:event_connectButtonActionPerformed

    private void addPcButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPcButtonActionPerformed

        fromConntctPCButt = Boolean.FALSE;

        //      ConnectionDialog.main(null);
        AddNewPcGUI.main(null);
    }//GEN-LAST:event_addPcButtonActionPerformed

    private void changpassButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changpassButtonActionPerformed
        ChangePassGUI.main(null);
}//GEN-LAST:event_changpassButtonActionPerformed

    private void passCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passCancelButtonActionPerformed

        UserPasswordField.setText("");
        
}//GEN-LAST:event_passCancelButtonActionPerformed

    String passHelper;
    private void passOKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passOKButtonActionPerformed

       passHelper = UserPasswordField.getText();
//       passHelper = "marc";
       System.out.println(passHelper);

       if(passHelper.equals(UserAccInfoPassword.passWord))
       {
           infoTablePanel.setVisible(true);
           infoTableSeeInstScrollPane.setVisible(false);
           passOKButton.setEnabled(false);
           passCancelButton.setEnabled(false);

           UserPasswordField.setText("");

//          this line shows log info on consone and adminLogInfoTextArea
            if(ServerMainWindoeForInitiating.isLogEnable == Boolean.TRUE)
            {
                AppLogInfoForAdministrator.logger.info(" User Account Information has been displayed . ");
            }


       }

       else
       {
           JOptionPane.showMessageDialog(this, "Wrong Passward ! !! !!!" + "\n" + "Retype. .. ...", "ERROR", JOptionPane.ERROR_MESSAGE);
           return;
       }
}//GEN-LAST:event_passOKButtonActionPerformed

    private void UserPasswordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UserPasswordFieldActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_UserPasswordFieldActionPerformed

    private void viewOnlyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewOnlyButtonActionPerformed
              ind = directAccTable1.getSelectedRow();
      if ( ind == -1 )
        {
           JOptionPane.showMessageDialog(this, "Nothing selected . .. ..." + "\n" + "Select an item from " + "\n" + "Direct IP Account Connection table", "Information", JOptionPane.INFORMATION_MESSAGE);
           return;
        }


      String name =  (String) directAccTable1.getValueAt(ind, 1);
//      System.out.println(name);
      if ( name == null )
        {
           JOptionPane.showMessageDialog(this, "Nothing selected..." + "\n" + "Select an item from " + "\n" + "Direct IP Account Connection table", "Information", JOptionPane.INFORMATION_MESSAGE);
           return;
        }

      Boolean conn_sts = (Boolean) directAccTable1.getValueAt(ind, 4);
      if(conn_sts == null)
      {
        JOptionPane.showMessageDialog(this, "This Host is  disconnected . .. ...", "Information", JOptionPane.INFORMATION_MESSAGE);
           return;
      }


      else
      {
            String key_nam = (String) userAccInfoTable.getValueAt(ind, 0);
            Hashtable<String,Viewer> HtID = new Hashtable<String,Viewer>();
            HtID = HostID;
            Viewer vwr = HtID.get(key_nam);
    //        vwr.Stop();
    //        vwr.disconnect();
    //        vwr.recorder.Stop();
            vwr.recorder.setViewOnly(true);
//            vwr.recorder.setPause(true);
//            vwr.recorder.viewerGUI.dispose();

      }



//          this line shows log info on consone and adminLogInfoTextArea
            if(ServerMainWindoeForInitiating.isLogEnable == Boolean.TRUE)
            {
                AppLogInfoForAdministrator.logger.info("View mood has been applied from administrator");
            }




    }//GEN-LAST:event_viewOnlyButtonActionPerformed

    private void fullControlButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullControlButtonActionPerformed
              ind = directAccTable1.getSelectedRow();
      if ( ind == -1 )
        {
           JOptionPane.showMessageDialog(this, "Nothing selected . .. ..." + "\n" + "Select an item from " + "\n" + "Direct IP Account Connection table", "Information", JOptionPane.INFORMATION_MESSAGE);
           return;
        }


      String name =  (String) directAccTable1.getValueAt(ind, 1);
//      System.out.println(name);
      if ( name == null )
        {
           JOptionPane.showMessageDialog(this, "Nothing selected..." + "\n" + "Select an item from " + "\n" + "Direct IP Account Connection table", "Information", JOptionPane.INFORMATION_MESSAGE);
           return;
        }

      Boolean conn_sts = (Boolean) directAccTable1.getValueAt(ind, 4);
      if(conn_sts == null)
      {
        JOptionPane.showMessageDialog(this, "This Host is  disconnected . .. ...", "Information", JOptionPane.INFORMATION_MESSAGE);
           return;
      }


      else
      {
                      String key_nam = (String) userAccInfoTable.getValueAt(ind, 0);
            Hashtable<String,Viewer> HtID = new Hashtable<String,Viewer>();
            HtID = HostID;
            Viewer vwr = HtID.get(key_nam);
    //        vwr.Stop();
    //        vwr.disconnect();
    //        vwr.recorder.Stop();
            vwr.recorder.setViewOnly(false);
//            vwr.recorder.setPause(true);
//            vwr.recorder.viewerGUI.dispose();


//          this line shows log info on consone and adminLogInfoTextArea
            if(ServerMainWindoeForInitiating.isLogEnable == Boolean.TRUE)
            {
                AppLogInfoForAdministrator.logger.info("Full control mood has been applied from administrator");
            }



      }
                  
    }//GEN-LAST:event_fullControlButtonActionPerformed

    private void jMenuItemSendFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSendFilesActionPerformed

        if (isServerRunning())
        if (ServerAdmin.SendClipboardFileList() == 0) {
            // no files in clipboard, exit
            JOptionPane.showMessageDialog(null, "No file in clipboard !!",
                "Information", JOptionPane.INFORMATION_MESSAGE);
        }


    }//GEN-LAST:event_jMenuItemSendFilesActionPerformed

    private void jMenuItemReceiveFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemReceiveFilesActionPerformed

            if (isServerRunning())
                  ServerAdmin.setUploadingFolder();


    }//GEN-LAST:event_jMenuItemReceiveFilesActionPerformed

    private void jCheckBoxManualAdrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxManualAdrActionPerformed
        jCheckBoxDefaultAdr.setEnabled(jCheckBoxManualAdr.isSelected());
        jComboBoxLocalAdrs.setEnabled(jCheckBoxManualAdr.isSelected());
        jCheckBoxMultihomedEnabled.setSelected(!jCheckBoxManualAdr.isSelected());
}//GEN-LAST:event_jCheckBoxManualAdrActionPerformed

    private void jCheckBoxMultihomedEnabledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMultihomedEnabledActionPerformed
        jCheckBoxManualAdr.setSelected(!jCheckBoxMultihomedEnabled.isSelected());
        jCheckBoxDefaultAdr.setSelected(false);
        jCheckBoxDefaultAdr.setEnabled(!jCheckBoxMultihomedEnabled.isSelected());
        jComboBoxLocalAdrs.setEnabled(!jCheckBoxMultihomedEnabled.isSelected());
}//GEN-LAST:event_jCheckBoxMultihomedEnabledActionPerformed

    private void jComboBoxLocalAdrsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxLocalAdrsActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jComboBoxLocalAdrsActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        jCheckBoxManualAdr.setEnabled(true);
        jCheckBoxDefaultAdr.setEnabled(true);
        jComboBoxLocalAdrs.setEnabled(true);
        jCheckBoxMultihomedEnabled.setEnabled(true);
        jCheckBoxSSLEnabled.setEnabled(true);
        jTextFieldPort.setEnabled(true);
        jTextFieldUsername.setEnabled(true);
        jPasswordField.setEnabled(true);
}//GEN-LAST:event_editButtonActionPerformed

    private void applyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyButtonActionPerformed


        HostServerConfig.server_address = jComboBoxLocalAdrs.getSelectedItem().toString();
        HostServerConfig.server_port = Integer.valueOf(jTextFieldPort.getText());

        HostServerConfig.username = jTextFieldUsername.getText();
        HostServerConfig.password = String.copyValueOf(jPasswordField.getPassword());

        HostServerConfig.multihomed_enabled = jCheckBoxMultihomedEnabled.isSelected();
        HostServerConfig.ssl_enabled = jCheckBoxSSLEnabled.isSelected();

        HostServerConfig.default_address = jCheckBoxDefaultAdr.isSelected();

        HostServerConfig.storeConfiguration();


        SMWFI02.setDisabled();

//          this line shows log info on consone and adminLogInfoTextArea
            if(isLogEnable == Boolean.TRUE)
            {
                AppLogInfoForAdministrator.logger.info("Server information has been edited");
            }


}//GEN-LAST:event_applyButtonActionPerformed

    private void runAdmServerToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runAdmServerToggleButtonActionPerformed

        if (ServerAdmin.isRunning()) {
            ServerAdmin.Stop();
            runAdmServerToggleButton.setToolTipText("Server Stopped ! !!"+"\n" + "Run Again");
            runAdmServerToggleButton.setIcon(new ImageIcon("resourse/ServerStop48.png"));


//          this line shows log info on consone and adminLogInfoTextArea
            if(isLogEnable == Boolean.TRUE)
            {
                AppLogInfoForAdministrator.logger.info("Server Stopped");
            }

        } else {
            ServerAdmin.Start();
            runAdmServerToggleButton.setToolTipText("Server Running ! !!\nWant to Stop ?");
            runAdmServerToggleButton.setIcon(new ImageIcon("resourse/ServerRunning 48.png"));


//          this line shows log info on consone and adminLogInfoTextArea
            if(isLogEnable == Boolean.TRUE)
            {
                AppLogInfoForAdministrator.logger.info("Server Started");
            }


        }       
        updateStatusOfAdm();

        ClientMainWindoeForInitiating.runHostWithAdmin();

}//GEN-LAST:event_runAdmServerToggleButtonActionPerformed

    private void hidInfoTablButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hidInfoTablButtonActionPerformed
           infoTablePanel.setVisible(false);
           infoTableSeeInstScrollPane.setVisible(true);
           passOKButton.setEnabled(true);
           passCancelButton.setEnabled(true);

           UserPasswordField.setText("");


//          this line shows log info on consone and adminLogInfoTextArea
            if(ServerMainWindoeForInitiating.isLogEnable == Boolean.TRUE)
            {
                AppLogInfoForAdministrator.logger.info(" User Account Information has been hided . ");
            }


    }//GEN-LAST:event_hidInfoTablButtonActionPerformed

    public static Boolean isLogEnable = Boolean.TRUE;

    @SuppressWarnings("static-access")
    private void DisableOrEnableLogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisableOrEnableLogButtonActionPerformed


        if(isLogEnable == Boolean.TRUE)
        {
            isLogEnable = Boolean.FALSE;
            DisableOrEnableLogButton.setText("Enable Log Record");
            adminLogInfoTextArea.setText("Log Record has been Disabled");
            ClearCurrentLogButton.setEnabled(Boolean.FALSE);
            ClearAllLogButton.setEnabled(Boolean.FALSE);
            ViewAllLogButton.setEnabled(Boolean.FALSE);
        }
        else
        {
            isLogEnable = Boolean.TRUE;
            DisableOrEnableLogButton.setText("Disable Log Record");
            adminLogInfoTextArea.setText("");
            ClearCurrentLogButton.setEnabled(Boolean.TRUE);
            ClearAllLogButton.setEnabled(Boolean.TRUE);
            ViewAllLogButton.setEnabled(Boolean.TRUE);

        }
        
    }//GEN-LAST:event_DisableOrEnableLogButtonActionPerformed

    private void ClearCurrentLogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearCurrentLogButtonActionPerformed


      if (JOptionPane.showConfirmDialog(this, "Clear Current Log File ? ",
                "Confirm Dialog", JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE) == JOptionPane.NO_OPTION) return;


//        AppLogInfoForAdministrator.clearFile("E:/JAVA PROGRAMS/NetBeansProjectes/MyJavaProject-02/MARS-Administrator-LogFile-0.log");
        AppLogInfoForAdministrator.clearFile("MARS-Administrator-LogFile-0.log");
        adminLogInfoTextArea.setText(null);



    }//GEN-LAST:event_ClearCurrentLogButtonActionPerformed

    private void ClearAllLogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearAllLogButtonActionPerformed


      if (JOptionPane.showConfirmDialog(this, "Clear All Log File ? ",
                "Confirm Dialog", JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE) == JOptionPane.NO_OPTION) return;


        AppLogInfoForAdministrator.clearAllFile();
        AppLogInfoForAdministrator.clearFile("MARS-Administrator-LogFile-0.log");
        adminLogInfoTextArea.setText(null);



    }//GEN-LAST:event_ClearAllLogButtonActionPerformed


    private void ViewAllLogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewAllLogButtonActionPerformed


            AbministratorLogListViewer.main(null);
   

    }//GEN-LAST:event_ViewAllLogButtonActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed


        MARS_AboutBoxGUI.main(null);


    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void connectFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectFileMenuItemActionPerformed

      fromConntctPCButt = Boolean.TRUE;

      ind = directAccTable1.getSelectedRow();
      if ( ind == -1 )
        {
           JOptionPane.showMessageDialog(this, "Nothing selected . .. ..." + "\n" + "Select an item from " + "\n" + "Direct IP Account Connection table", "Information", JOptionPane.INFORMATION_MESSAGE);
           return;
        }


      String name =  (String) directAccTable1.getValueAt(ind, 1);
      if ( name == null )
        {
           JOptionPane.showMessageDialog(this, "Nothing selected . .. ..." + "\n" + "Select an item from " + "\n" + "Direct IP Account Connection table", "Information", JOptionPane.INFORMATION_MESSAGE);
           return;
        }

      Boolean conn_sts = (Boolean) directAccTable1.getValueAt(ind, 4);
      if(conn_sts == Boolean.TRUE)
      {
        JOptionPane.showMessageDialog(this, "This Host is already connected . .. ...", "Information", JOptionPane.INFORMATION_MESSAGE);
           return;
      }


      else
      {
      if (JOptionPane.showConfirmDialog(this, "Connect " + name + " ? ",
                "Confirm Dialog", JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE) == JOptionPane.CANCEL_OPTION) return;
      // this line minimise the row height
      directAccTable1.setRowHeight(ind, 35);
      // this line deselect the connection status
      directAccTable1.setValueAt(connection_sts,ind, 4);


      String prt = (String) userAccInfoTable.getValueAt(ind, 1);
      int intPrt = Integer.parseInt(prt);
      startViewer((String) userAccInfoTable.getValueAt(ind, 0), intPrt,
                (String) userAccInfoTable.getValueAt(ind, 2),
                (String) userAccInfoTable.getValueAt(ind, 3),
                (Boolean) userAccInfoTable.getValueAt(ind, 4));



      // this saves the Host properties to the table
//        ServerAdmin.displayViewerPropertiesOnTable(ind);
//        tableDispIndex++;

        //this is for saving input information on jtable
//        saveOnDirectAccTable(AddNewPcGUI.jTextFieldName.getText(),AddNewPcGUI.jTextFieldIPAdr.getText(),
//                HostProperties.host_os_name,HostProperties.host_computer_name,HostProperties.host_user_name);


//        PanelFocusingAction();


//          this line shows log info on consone and adminLogInfoTextArea
            if(ServerMainWindoeForInitiating.isLogEnable == Boolean.TRUE)
            {
                AppLogInfoForAdministrator.logger.info("Viewer IP: " + userAccInfoTable.getValueAt(ind, 0) + ", has been reconnected");
            }


      }


    }//GEN-LAST:event_connectFileMenuItemActionPerformed

    private void disconnectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectMenuItemActionPerformed

      ind = directAccTable1.getSelectedRow();
      if ( ind == -1 )
        {
           JOptionPane.showMessageDialog(this, "Nothing selected . .. ..." + "\n" + "Select an item from " + "\n" + "Direct IP Account Connection table", "Information", JOptionPane.INFORMATION_MESSAGE);
           return;
        }


      String name =  (String) directAccTable1.getValueAt(ind, 1);
//      System.out.println(name);
      if ( name == null )
        {
           JOptionPane.showMessageDialog(this, "Nothing selected..." + "\n" + "Select an item from " + "\n" + "Direct IP Account Connection table", "Information", JOptionPane.INFORMATION_MESSAGE);
           return;
        }

      Boolean conn_sts = (Boolean) directAccTable1.getValueAt(ind, 4);
      if(conn_sts == null)
      {
        JOptionPane.showMessageDialog(this, "This Host is already disconnected . .. ...", "Information", JOptionPane.INFORMATION_MESSAGE);
           return;
      }


      if (JOptionPane.showConfirmDialog(this, "Disconnect " + name + " ? ",
                "Confirm Dialog", JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE) == JOptionPane.CANCEL_OPTION) return;

      // this line minimise the row height
      directAccTable1.setRowHeight(ind, 20);
      // this line deselect the connection status
      directAccTable1.setValueAt(null,ind, 4);

      // this line disconnect the viewer
//      ServerAdmin.removeViewer(ind);
//      ServerAdmin.removeViewer00002(ind);


      String key_nam = (String) userAccInfoTable.getValueAt(ind, 0);
//      Hashtable<String,Viewer> HtID = new Hashtable<String,Viewer>();
//      HtID = HostID;
      viewerrr = null;
      viewerrr = HostID.get(key_nam);

        System.out.println(viewerrr);
        System.out.println(key_nam);

//      vwr.Stop();
//      vwr.disconnect();
//      vwr.recorder.Stop();
      viewerrr.recorder.setPause(true);
      viewerrr.recorder.viewerGUI.dispose();
//      vwr.recorder.viewerGUI.close();
//      HtID.put(key_nam, vwr);
//      vie.recorder.viewerGUI.dispose();



//          this line shows log info on consone and adminLogInfoTextArea
            if(ServerMainWindoeForInitiating.isLogEnable == Boolean.TRUE)
            {
                AppLogInfoForAdministrator.logger.info("Viewer IP: " + key_nam + ", has been disconnected");
            }




    }//GEN-LAST:event_disconnectMenuItemActionPerformed

    private void viewMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewMenuItemActionPerformed
              ind = directAccTable1.getSelectedRow();
      if ( ind == -1 )
        {
           JOptionPane.showMessageDialog(this, "Nothing selected . .. ..." + "\n" + "Select an item from " + "\n" + "Direct IP Account Connection table", "Information", JOptionPane.INFORMATION_MESSAGE);
           return;
        }


      String name =  (String) directAccTable1.getValueAt(ind, 1);
//      System.out.println(name);
      if ( name == null )
        {
           JOptionPane.showMessageDialog(this, "Nothing selected..." + "\n" + "Select an item from " + "\n" + "Direct IP Account Connection table", "Information", JOptionPane.INFORMATION_MESSAGE);
           return;
        }

      Boolean conn_sts = (Boolean) directAccTable1.getValueAt(ind, 4);
      if(conn_sts == null)
      {
        JOptionPane.showMessageDialog(this, "This Host is  disconnected . .. ...", "Information", JOptionPane.INFORMATION_MESSAGE);
           return;
      }


      else
      {
            String key_nam = (String) userAccInfoTable.getValueAt(ind, 0);
            Hashtable<String,Viewer> HtID = new Hashtable<String,Viewer>();
            HtID = HostID;
            Viewer vwr = HtID.get(key_nam);
    //        vwr.Stop();
    //        vwr.disconnect();
    //        vwr.recorder.Stop();
            vwr.recorder.setViewOnly(true);
//            vwr.recorder.setPause(true);
//            vwr.recorder.viewerGUI.dispose();

      }



//          this line shows log info on consone and adminLogInfoTextArea
            if(ServerMainWindoeForInitiating.isLogEnable == Boolean.TRUE)
            {
                AppLogInfoForAdministrator.logger.info("View mood has been applied from administrator");
            }




    }//GEN-LAST:event_viewMenuItemActionPerformed

    private void controlMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_controlMenuItemActionPerformed
              ind = directAccTable1.getSelectedRow();
      if ( ind == -1 )
        {
           JOptionPane.showMessageDialog(this, "Nothing selected . .. ..." + "\n" + "Select an item from " + "\n" + "Direct IP Account Connection table", "Information", JOptionPane.INFORMATION_MESSAGE);
           return;
        }


      String name =  (String) directAccTable1.getValueAt(ind, 1);
//      System.out.println(name);
      if ( name == null )
        {
           JOptionPane.showMessageDialog(this, "Nothing selected..." + "\n" + "Select an item from " + "\n" + "Direct IP Account Connection table", "Information", JOptionPane.INFORMATION_MESSAGE);
           return;
        }

      Boolean conn_sts = (Boolean) directAccTable1.getValueAt(ind, 4);
      if(conn_sts == null)
      {
        JOptionPane.showMessageDialog(this, "This Host is  disconnected . .. ...", "Information", JOptionPane.INFORMATION_MESSAGE);
           return;
      }


      else
      {
                      String key_nam = (String) userAccInfoTable.getValueAt(ind, 0);
            Hashtable<String,Viewer> HtID = new Hashtable<String,Viewer>();
            HtID = HostID;
            Viewer vwr = HtID.get(key_nam);
    //        vwr.Stop();
    //        vwr.disconnect();
    //        vwr.recorder.Stop();
            vwr.recorder.setViewOnly(false);
//            vwr.recorder.setPause(true);
//            vwr.recorder.viewerGUI.dispose();


//          this line shows log info on consone and adminLogInfoTextArea
            if(ServerMainWindoeForInitiating.isLogEnable == Boolean.TRUE)
            {
                AppLogInfoForAdministrator.logger.info("Full control mood has been applied from administrator");
            }



      }

    }//GEN-LAST:event_controlMenuItemActionPerformed

    private void actionMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionMenuActionPerformed

      ind = directAccTable1.getSelectedRow();
      if ( ind == -1 )
        {
           JOptionPane.showMessageDialog(this, "Nothing selected . .. ..." + "\n" + "Select an item from " + "\n" + "Direct IP Account Connection table", "Information", JOptionPane.INFORMATION_MESSAGE);
           return;
        }


      String name =  (String) directAccTable1.getValueAt(ind, 1);
//      System.out.println(name);
      if ( name == null )
        {
           JOptionPane.showMessageDialog(this, "Nothing selected..." + "\n" + "Select an item from " + "\n" + "Direct IP Account Connection table", "Information", JOptionPane.INFORMATION_MESSAGE);
           return;
        }

      Boolean conn_sts = (Boolean) directAccTable1.getValueAt(ind, 4);
      if(conn_sts == null)
      {
        JOptionPane.showMessageDialog(this, "This Host is disconnected . .. ...", "Information", JOptionPane.INFORMATION_MESSAGE);
           return;
      }


                 jPopupMenuFileTranfer.show(fileTrnsButton, 45, 45);


//          this line shows log info on consone and adminLogInfoTextArea
/*            if(ServerMainWindoeForInitiating.isLogEnable == Boolean.TRUE)
            {
                AppLogInfoForAdministrator.logger.info("File transferd to Viewer IP: " + userAccInfoTable.getValueAt(ind, 0) );
            }
 */

    }//GEN-LAST:event_actionMenuActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed

        if (JOptionPane.showConfirmDialog(null,
                                "Exit application ?", "Confirm Dialog",
                                JOptionPane.OK_CANCEL_OPTION) ==
                                JOptionPane.OK_OPTION) {

//          this line shows log info on consone and adminLogInfoTextArea
            if(isLogEnable == Boolean.TRUE)
            {
                AppLogInfoForAdministrator.logger.info("Application exits");
            }


                                System.exit(0);
                        }

    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void minTryMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minTryMenuItemActionPerformed

        this.dispose();

    }//GEN-LAST:event_minTryMenuItemActionPerformed

    private void closeAllMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeAllMenuItemActionPerformed


        System.exit(0);

    }//GEN-LAST:event_closeAllMenuItemActionPerformed

    private void addPCMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPCMenuItemActionPerformed


        fromConntctPCButt = Boolean.FALSE;

        //      ConnectionDialog.main(null);
        AddNewPcGUI.main(null);


    }//GEN-LAST:event_addPCMenuItemActionPerformed

    private void jCheckBoxSSLEnabledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSSLEnabledActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxSSLEnabledActionPerformed

    private void manualMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manualMenuItemActionPerformed

        JOptionPane.showMessageDialog(this, "This feature not yet been implemented. .. ...", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;

    }//GEN-LAST:event_manualMenuItemActionPerformed

    private void Qu1MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Qu1MenuItemActionPerformed

        JOptionPane.showMessageDialog(this, "This feature not yet been implemented. .. ...", "Information", JOptionPane.INFORMATION_MESSAGE);
            return;


    }//GEN-LAST:event_Qu1MenuItemActionPerformed

    private void bugMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bugMenuItemActionPerformed
      
        try {
            System.out.println("Open chm file");
//            java.lang.Runtime.getRuntime().exec("rundll32" + " " + "url.dll,FileProtocolHandler" + " " + "MARC/myjavaproject/resources/MARC-Project Profile.chm");
//                /myjavaproject/resources/RemoteDesktop48.png          MARC-Project-Profile.chm
//                  /myjavaproject/resources/MARC-Project-Profile.chm
//            Desktop.getDesktop().open( new File("/myjavaproject/resources/MARC-Project-Profile.chm"));
            Runtime.getRuntime().exec("hh.exe MARC-Project-Profile.chm");

            System.out.println("Open chm file   02");
        } catch (IOException ex) {
            Logger.getLogger(ServerMainWindoeForInitiating.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Open chm file   03");
        }

    }//GEN-LAST:event_bugMenuItemActionPerformed

    public static void runAdminWithHost()
    {
            if (!ServerAdmin.isRunning()) {
//            ServerAdmin.Stop();
            runAdmServerToggleButton.setToolTipText("Server Stopped ! !!"+"\n" + "Run Again");
            runAdmServerToggleButton.setIcon(new ImageIcon("resourse/ServerStop48.png"));
        } else {
//            ServerAdmin.Start();
            runAdmServerToggleButton.setToolTipText("Server Running ! !!\nWant to Stop ?");
            runAdmServerToggleButton.setIcon(new ImageIcon("resourse/ServerRunning 48.png"));
        }
        updateStatusOfAdm();
    }
    /**
    * @param args the command line arguments
    */

    public static int CWC = 1;
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ServerMainWindoeForInitiating SMWFI;

                SMWFI = new ServerMainWindoeForInitiating();


                //  makes the User Info & Pass invisible
                SMWFI.infoTablePanel.setVisible(false);




//                SMWFI.setSize(753,635);
                SMWFI.setVisible(true);
                SMWFI.setLocationRelativeTo( null );


                Container cont = SMWFI.getContentPane();

                Toolkit tk = Toolkit.getDefaultToolkit();
                ySize = ( (int)  tk.getScreenSize().getHeight());
                xSize = ( (int)  tk.getScreenSize().getWidth());
//                SMWFI.setBounds((xSize/2) - 450, (ySize/2) - 350, 905, 660);




                //        CONFIG_FILE = FileUtility.getCurrentDirectory() + "config";
//                SERVER_CONFIG_FILE = FileUtility.getCurrentDirectory() + "server.config";
                VIEWER_CONFIG_FILE = FileUtility.getCurrentDirectory() + "viewer.config";

                KEY_STORE = FileUtility.getCurrentDirectory() + "keystore";
                TRUST_STORE = FileUtility.getCurrentDirectory() + "truststore";

                System.getProperties().remove("java.rmi.server.hostname");

            //  this copyes the SMWFI to SMWFI02
                SMWFI02 = SMWFI;


                SMWFI02.setDisabled();

                // this statement changes the admin server state with host for the first time
                if(main.iti == 2)
                {
                  runAdminWithHost();
                }

            }
        });
    }


    public static void showServerMainWindoeForInitiating()
    {
       SMWFI02.setVisible(true);
       SMWFI02.setLocationRelativeTo( null );
    }
    public static void closeServerMainWindoeForInitiating()
    {
//       SMWFI02.setVisible(Boolean.FALSE);
       SMWFI02.setVisible(false);
    }



    public static void startServer(int port,
            String username, String password,
            boolean ssl_enabled, boolean multihomed_enabled) {

        HostServerConfig.SetConfiguration(port, username, password,
                ssl_enabled, multihomed_enabled);

        ServerAdmin.Start();
    }

    public static Viewer viewerrr;
    public static void startViewer(String server, int port,
            String username, String password, boolean ssl_enabled) {

        HostConfigForAddingPc.SetConfiguration(server, port,
                username, password, ssl_enabled);

//        new Viewer().Start();

        viewerrr = new Viewer();
        viewerrr.Start();

//        HostID.put((String) AddNewPcGUI.jTextFieldIPAdr.getText(),recorder);
        HostID.put( AddNewPcGUI.jTextFieldIPAdr.getText(),viewerrr);

        System.out.println(viewerrr);
        System.out.println(AddNewPcGUI.jTextFieldIPAdr.getText());




//        ViewerID.put(ind, viewerrr);
//        ViewerID.put(server_name, viewerrr);
//        Id++;
    }

   public static void setStoreProperties() {
        System.setProperty("javax.net.ssl.trustStore", TRUST_STORE);
        System.setProperty("javax.net.ssl.trustStorePassword", "trustword");
        System.setProperty("javax.net.ssl.keyStore", KEY_STORE);
        System.setProperty("javax.net.ssl.keyStorePassword", "password");
   }

   public static void clearStoreProperties() {
        System.getProperties().remove("javax.net.ssl.trustStore");
        System.getProperties().remove("javax.net.ssl.trustStorePassword");
        System.getProperties().remove("javax.net.ssl.keyStore");
        System.getProperties().remove("javax.net.ssl.keyStorePassword");
    }















   

       public static boolean isServerRunning() {
        boolean bool = ServerAdmin.isRunning();
        if (!bool)
            JOptionPane.showMessageDialog(null,
                "Server is not running !!",
                "Information", JOptionPane.INFORMATION_MESSAGE);
        return bool;
    }

 
       public static  void updateStatusOfAdm() {
        if (ServerAdmin.isRunning()) {
            admTextAreatStatus.setText(ServerAdmin.getStatus());
//            runServerToggleButton.setText("Stop");
//            runServerToggleButton.setIcon(new ImageIcon("images/ServerRunning 48.png"));
        }
        else {
            if (ServerAdmin.isIdle())
            {
                admTextAreatStatus.setText("Idle.");
                runAdmServerToggleButton.setIcon(new ImageIcon("resourse/idleIcon48.png"));
            }
            else
            {
                admTextAreatStatus.setText("Stopped.");
                runAdmServerToggleButton.setIcon(new ImageIcon("resourse/ServerStop48.png"));
            }
            
        }
    }



public void setDisabled()
{
        jCheckBoxManualAdr.setEnabled(false);
        jCheckBoxDefaultAdr.setEnabled(false);
        jComboBoxLocalAdrs.setEnabled(false);
        jCheckBoxMultihomedEnabled.setEnabled(false);
        jCheckBoxSSLEnabled.setEnabled(false);
        jTextFieldPort.setEnabled(false);
        jTextFieldUsername.setEnabled(false);
        jPasswordField.setEnabled(false);
}






    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ClearAllLogButton;
    private javax.swing.JButton ClearCurrentLogButton;
    private javax.swing.JButton DisableOrEnableLogButton;
    private javax.swing.JPanel PassPanel;
    private javax.swing.JMenuItem Qu1MenuItem;
    private javax.swing.JPasswordField UserPasswordField;
    private javax.swing.JButton ViewAllLogButton;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem addPCMenuItem;
    private javax.swing.JButton addPcButton;
    private javax.swing.JPanel admConnectionPanel;
    private javax.swing.JButton admExitButton;
    private javax.swing.JScrollPane admStatusScrollPane;
    public static javax.swing.JTextArea admTextAreatStatus;
    private javax.swing.JTabbedPane adminConnectionTabbedPane;
    private javax.swing.JPanel adminContactPanel;
    private javax.swing.JTabbedPane adminHistTabbedPane;
    private javax.swing.JPanel adminIconPanel;
    private javax.swing.JPanel adminLogInfoPanel;
    private javax.swing.JScrollPane adminLogInfoScrollPane;
    public static javax.swing.JTextArea adminLogInfoTextArea;
    private javax.swing.JMenuBar adminMenuBar;
    private javax.swing.JPanel adminMomPanel;
    private javax.swing.JPanel adminStatusPanel;
    private javax.swing.JButton applyButton;
    private javax.swing.JMenuItem bugMenuItem;
    private javax.swing.JButton changpassButton;
    private javax.swing.JMenuItem closeAllMenuItem;
    private javax.swing.JButton connectButton;
    private javax.swing.JMenuItem connectFileMenuItem;
    private javax.swing.JMenuItem controlMenuItem;
    private javax.swing.JPanel directAccPanel;
    private javax.swing.JScrollPane directAccScrollPane;
    public static javax.swing.JTable directAccTable1;
    private javax.swing.JButton disconnectButton;
    private javax.swing.JMenuItem disconnectMenuItem;
    private javax.swing.JButton editButton;
    private javax.swing.JButton fileTrnsButton;
    private javax.swing.JMenuItem filtnsMenuItem;
    private javax.swing.JButton fullControlButton;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton hidInfoTablButton;
    private javax.swing.JPanel infoTablePanel;
    private javax.swing.JScrollPane infoTableSeeInstScrollPane;
    private javax.swing.JCheckBox jCheckBoxDefaultAdr;
    private javax.swing.JCheckBox jCheckBoxManualAdr;
    private javax.swing.JCheckBox jCheckBoxMultihomedEnabled;
    private javax.swing.JCheckBox jCheckBoxSSLEnabled;
    private javax.swing.JComboBox jComboBoxLocalAdrs;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuItem jMenuItemReceiveFiles;
    private javax.swing.JMenuItem jMenuItemSendFiles;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPasswordField jPasswordField;
    private javax.swing.JPopupMenu jPopupMenuFileTranfer;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator10;
    private javax.swing.JSeparator jSeparator14;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JTextField jTextFieldPort;
    private javax.swing.JTextField jTextFieldUsername;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane2;
    private javax.swing.JTextPane jTextPane3;
    private javax.swing.JMenuItem manualMenuItem;
    private javax.swing.JMenuItem minTryMenuItem;
    private javax.swing.JButton passCancelButton;
    private javax.swing.JButton passOKButton;
    public static javax.swing.JToggleButton runAdmServerToggleButton;
    private javax.swing.JButton strHosButton;
    private javax.swing.JPanel timePanel;
    public static javax.swing.JTable userAccInfoTable;
    private javax.swing.JMenuItem viewMenuItem;
    private javax.swing.JButton viewOnlyButton;
    private javax.swing.JPanel virtualAccPanel;
    private javax.swing.JScrollPane virtualAccScrollPane;
    private javax.swing.JMenu windowMenu;
    private javax.swing.JPanel workingGlasPanel;
    // End of variables declaration//GEN-END:variables


//    public static int i = -1;
//    public static JCheckBox connection_sts;
//    public static String connection_sts;
    public static Boolean connection_sts;
//    public static Boolean connection_sts2;
//    public static String connected;
    public static  JComponent jc;
    public static String server_name;
    private static Boolean ssl_con ;



      //this is for saving input information on jtable
    @SuppressWarnings("static-access")
//    public static  void saveOnDirectAccTable(String servreName,String server,String hostOSName,
//            String hostCompuName,String hostUserName)
    public static  void saveOnDirectAccTable(int p)
    {

        String servreName = AddNewPcGUI.jTextFieldName.getText();
        String server = AddNewPcGUI.jTextFieldIPAdr.getText();
//        String hostOSName = HostProperties.host_os_name;
//        String hostCompuName = HostProperties.host_computer_name;
//        String hostUserName = HostProperties.host_user_name;


        server_name = new String(servreName);
        String server_IP = new String(server);
//        String osName = new String(hostOSName);
//        String host_com_name = new String(hostCompuName);
//        String host_user = new String(hostUserName);

        // this makes the connection_sts true that means Connected
        connection_sts = Boolean.parseBoolean("True");
//        connection_sts2 = Boolean.parseBoolean("yes");

        // this makes the connection_sts false that means Disonnected
//        connection_sts = Boolean.parseBoolean("yes");
        directAccTable1.setEditingRow(p);
      try
      {
       directAccTable1.setValueAt(server_name, p, 0);
       directAccTable1.setValueAt(server_IP, p, 1);
       directAccTable1.setValueAt(AddNewPcGUI.jTextFieldPort.getText(), tableDispIndex, 2);
////////       directAccTable1.setValueAt(osName, p, 2);
////////       directAccTable1.setValueAt(host_com_name, p, 3);
////////       directAccTable1.setValueAt(host_user, p, 4);
       if(AddNewPcGUI.jCheckBoxSSLEnabled.isSelected())
             ssl_con = Boolean.parseBoolean("True");
       else ssl_con = Boolean.parseBoolean("yes");
       directAccTable1.setValueAt(ssl_con, tableDispIndex, 4);



//       virtualAccPanel.isFocusOwner();
       directAccTable1.setValueAt(connection_sts, p, 4);
//       directAccTable1.setValueAt(connection_sts2, i, 6);

       directAccTable1.setRowHeight(p, 35);
      }
      catch(Exception e)
      {
      }



    /*     if (!directAccTable1.isRowSelected(i))
                {
                    Boolean type = (Boolean) directAccTable1.getValueAt(i, 5);
                    if ( connection_sts.TRUE ) {
                        directAccTable1.setRowHeight(i, 30);
                        jc.setBackground(Color.GREEN);
                        directAccTable1.setBackground(Color.GREEN);
                    }
                    if ( Boolean.FALSE ) jc.setBackground(Color.YELLOW);
                    else jc.setBackground(Color.GRAY);
                }
    */

//       i++;

    }


   
        private JComponent createBorderForDirectTable()
    {

        directAccTable1 = new JTable(  )
        {
            private Border outside = new MatteBorder(1, 0, 1, 0, Color.RED);
            private Border inside = new EmptyBorder(0, 1, 0, 1);
            private Border highlight = new CompoundBorder(outside, inside);

            @SuppressWarnings("static-access")
            @Override
            public Component prepareRenderer(TableCellRenderer renderer, int row, int column)
            {
                 jc = (JComponent) super.prepareRenderer(renderer, row, column);
//                JComponent jc = (JComponent)c;

                // Add a border to the selected row

                if (isRowSelected(row))
                    jc.setBorder( highlight );

                if (!isRowSelected(row))
                    jc.setBackground(row % 2 == 0 ? getBackground() : Color.LIGHT_GRAY);


                return jc;
            }
        };

        directAccTable1.setPreferredScrollableViewportSize(directAccTable1.getPreferredSize());
//        directAccTable1.
//        directAccTable1.changeSelection(0, 0, false, false);
        return  directAccTable1;
    }

    


         private JComponent createBorderForAccInfoTable()
    {

        userAccInfoTable = new JTable(  )
        {
            private Border outside = new MatteBorder(1, 0, 1, 0, Color.RED);
            private Border inside = new EmptyBorder(0, 1, 0, 1);
            private Border highlight = new CompoundBorder(outside, inside);

            @SuppressWarnings("static-access")
            @Override
            public Component prepareRenderer(TableCellRenderer renderer, int row, int column)
            {
                 jc = (JComponent) super.prepareRenderer(renderer, row, column);
//                JComponent jc = (JComponent)c;

                // Add a border to the selected row

                if (isRowSelected(row))
                    jc.setBorder( highlight );

                if (!isRowSelected(row))
                    jc.setBackground(row % 2 == 0 ? getBackground() : Color.LIGHT_GRAY);


                return jc;
            }
        };

        userAccInfoTable.setPreferredScrollableViewportSize(userAccInfoTable.getPreferredSize());
//        directAccTable1.
//        directAccTable1.changeSelection(0, 0, false, false);
        return  userAccInfoTable;
    }











         //  this shows and updates the time

    public JPanel show_date_time = new JPanel();

    public JLabel date = new JLabel("Date");
    public JLabel time = new JLabel("Time");
    public JLabel show_time = new JLabel("Show Time");
    public JLabel Show_date = new JLabel("Show Date");
    public JLabel Show_date02 = new JLabel("Show Date");
    public JLabel Show_date03 = new JLabel("Show Date");

    DateFormat dateFormat2 = new SimpleDateFormat("h:mm:ss a");
    java.util.Date date2;



        public JPanel Show_Time_date(){


        DateFormat dateFormat = new SimpleDateFormat("EEE-dd MMM-yyyy");
        java.util.Date date = new java.util.Date();
        String dateTime = dateFormat.format(date);

        Show_date = new JLabel(dateTime);
        show_date_time.add(Show_date);

        show_time= new JLabel("");
        updateDateTime();
        show_date_time.add(show_time);


        show_date_time.setSize(110, 300);
        show_date_time.setOpaque(false);
        Show_date.setForeground(Color.red);
        show_time.setForeground(Color.red);


        show_date_time.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.darkGray, java.awt.Color.gray));
        show_date_time.setForeground(new java.awt.Color(204, 0, 0));

        return show_date_time;
    }



    public void updateDateTime()
    {
    Thread th = new Thread(new Runnable()
        {
        public void run()
            {
            while(true)
                {
                date2 = new java.util.Date();
                String dateTime = dateFormat2.format(date2);
                show_time.setText(dateTime);
                show_time.updateUI();
                }
            }
        });
    th.start();
    }






    public void showInfoOnAdminTextArea(String data)
    {
        adminLogInfoTextArea.append(data);
        this.validate();
    }




    
}
